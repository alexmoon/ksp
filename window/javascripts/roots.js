// Generated by CoffeeScript 1.6.2
(function() {
  var GOLDEN_RATIO, MACHINE_EPSILON, sign;

  GOLDEN_RATIO = (1 + Math.sqrt(5)) / 2;

  MACHINE_EPSILON = 1.0;

  while ((1.0 + MACHINE_EPSILON) !== 1.0) {
    MACHINE_EPSILON *= 0.5;
  }

  sign = function(x) {
    if (typeof x === 'number') {
      if (x) {
        if (x < 0) {
          return -1;
        } else {
          return 1;
        }
      } else {
        if (x === x) {
          return 0;
        } else {
          return NaN;
        }
      }
    } else {
      return NaN;
    }
  };

  (typeof exports !== "undefined" && exports !== null ? exports : this).roots = {
    MACHINE_EPSILON: MACHINE_EPSILON,
    newtonsMethod: function(x0, f, df) {
      var x;

      while (true) {
        x = x0 - f(x0) / df(x0);
        if (isNaN(x) || Math.abs(x - x0) < 1e-6) {
          return x;
        }
        x0 = x;
      }
    },
    brentsMethod: function(a, b, relativeAccuracy, f, fa, fb) {
      var c, d, e, fc, i, m, p, q, r, s, tol;

      if (fa == null) {
        fa = f(a);
      }
      if (fb == null) {
        fb = f(b);
      }
      c = a;
      fc = fa;
      d = b - a;
      e = d;
      relativeAccuracy += 0.5 * MACHINE_EPSILON;
      if (isNaN(fa) || isNaN(fb)) {
        return NaN;
      }
      if (sign(fa) === sign(fb)) {
        return NaN;
      }
      i = 0;
      while (true) {
        if (Math.abs(fc) < Math.abs(fb)) {
          a = b;
          b = c;
          c = a;
          fa = fb;
          fb = fc;
          fc = fa;
        }
        tol = relativeAccuracy * Math.abs(b);
        m = 0.5 * (c - b);
        if (fb === 0 || Math.abs(m) <= tol) {
          return b;
        }
        if (i > 100) {
          throw "Brent's method failed to converge after 100 iterations";
        }
        if (Math.abs(e) < tol || Math.abs(fa) <= Math.abs(fb)) {
          d = e = m;
        } else {
          s = fb / fa;
          if (a === c) {
            p = 2 * m * s;
            q = 1 - s;
          } else {
            q = fa / fc;
            r = fb / fc;
            p = s * (2 * m * q * (q - r) - (b - a) * (r - 1));
            q = (q - 1) * (r - 1) * (s - 1);
          }
          if (p > 0) {
            q = -q;
          } else {
            p = -p;
          }
          if (2 * p < Math.min(3 * m * q - Math.abs(tol * q), Math.abs(e * q))) {
            e = d;
            d = p / q;
          } else {
            d = e = m;
          }
        }
        a = b;
        fa = fb;
        if (Math.abs(d) > tol) {
          b += d;
        } else {
          b += m > 0 ? tol : -tol;
        }
        fb = f(b);
        if (isNaN(fb)) {
          return NaN;
        }
        if ((fb < 0 && fc < 0) || (fb > 0 && fc > 0)) {
          c = a;
          fc = fa;
          d = e = b - a;
        }
        i++;
      }
    },
    goldenSectionSearch: function(x1, x2, epsilon, f) {
      var k, x, x3, y, y2;

      k = 2 - GOLDEN_RATIO;
      x3 = x2;
      x2 = x1 + k * (x3 - x1);
      y2 = f(x2);
      while (true) {
        if ((x3 - x2) > (x2 - x1)) {
          x = x2 + k * (x3 - x2);
        } else {
          x = x2 - k * (x2 - x1);
        }
        if ((x3 - x1) < (epsilon * (x2 + x))) {
          return (x3 + x1) / 2;
        }
        y = f(x);
        if (y < y2) {
          if ((x3 - x2) > (x2 - x1)) {
            x1 = x2;
          } else {
            x3 = x2;
          }
          x2 = x;
          y2 = y;
        } else {
          if ((x3 - x2) > (x2 - x1)) {
            x3 = x;
          } else {
            x1 = x;
          }
        }
      }
    }
  };

}).call(this);
